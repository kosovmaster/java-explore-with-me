{
	"info": {
		"_postman_id": "f21384fd-e464-4d67-88e5-e46d11a1f67c",
		"name": "Comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32547807"
	},
	"item": [
		{
			"name": "Создание комментария",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        console.log(\"Начало выполнения main()\");\r",
							"\r",
							"        const owner = await api.addUser(rnd.getUser());\r",
							"        console.log(\"Создан пользователь-владелец:\", owner);\r",
							"\r",
							"        const user1 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user1.id);\r",
							"        console.log(\"Создан пользователь:\", user1);\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        console.log(\"Создана категория:\", category);\r",
							"\r",
							"        let event = await api.addEvent(owner.id, rnd.getEvent(category.id));\r",
							"        console.log(\"Создано событие:\", event);\r",
							"\r",
							"        const updatedStatusEvent = await api.publishEvent(event.id);\r",
							"        console.log(\"Событие опубликовано:\", updatedStatusEvent);\r",
							"\r",
							"        pm.request.body.update({\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify(updatedStatusEvent),\r",
							"            options: { raw: { language: 'json' } }\r",
							"        });\r",
							"        \r",
							"        const comment = await api.addComment(event.id, user1.id, rnd.getComment(null));\r",
							"        console.log(\"Создан комментарий:\", comment);\r",
							"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
							"        pm.environment.set(\"source\", JSON.stringify(comment));\r",
							"        \r",
							"        console.log(\"Завершение выполнения main()\");\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.environment.get(\"source\"));\r",
							"console.log(\"source=\", source);\r",
							"\r",
							"const target = pm.response.json();\r",
							"console.log(\"target=\", target);\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, text, userName, created, updated, replies\", function () {\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('text');\r",
							"    pm.expect(target).to.have.property('userName');\r",
							"    pm.expect(target).to.have.property('created');\r",
							"    pm.expect(target).to.have.property('updated');\r",
							"    pm.expect(target).to.have.property('reply');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target).to.have.property('id').that.is.not.null;\r",
							"    pm.expect(source.text).equal(target.text);\r",
							"    pm.expect(source.userName).equal(target.userName);\r",
							"    pm.expect(source.created).equal(target.created);\r",
							"    pm.expect(source.updated).equal(target.updated);\r",
							"    pm.expect(target).to.have.property('reply').that.is.null;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comment/:commentId?userId={{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comment",
						":commentId"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					],
					"variable": [
						{
							"key": "commentId",
							"value": "{{commentId}}"
						}
					]
				},
				"description": "Обратите внимание:\n - дата начала события должна быть не ранее чем за час от даты публикации.\n- событие должно быть в состоянии ожидания публикации"
			},
			"response": []
		},
		{
			"name": "Обновление комментария",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        console.log(\"Начало выполнения main()\");\r",
							"\r",
							"        const owner = await api.addUser(rnd.getUser());\r",
							"        console.log(\"Создан пользователь-владелец:\", owner);\r",
							"\r",
							"        const user1 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user1.id);\r",
							"        console.log(\"Создан пользователь:\", user1);\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        console.log(\"Создана категория:\", category);\r",
							"\r",
							"        let event = await api.addEvent(owner.id, rnd.getEvent(category.id));\r",
							"        console.log(\"Создано событие:\", event);\r",
							"\r",
							"        const updatedStatusEvent = await api.publishEvent(event.id);\r",
							"        console.log(\"Событие опубликовано:\", updatedStatusEvent);\r",
							"\r",
							"        pm.request.body.update({\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify(updatedStatusEvent),\r",
							"            options: { raw: { language: 'json' } }\r",
							"        });\r",
							"        \r",
							"        const comment = await api.addComment(event.id, user1.id, rnd.getComment(null));\r",
							"        console.log(\"Создан комментарий:\", comment);\r",
							"\r",
							"        const comment1 = await api.updateComment(comment.id, user1.id, rnd.getCommentUpdate(comment.id, null));\r",
							"        console.log(\"Комментарий обновлен:\", comment1);\r",
							"        pm.collectionVariables.set(\"commentId\", comment1.id);\r",
							"        pm.environment.set(\"source\", JSON.stringify(comment1));\r",
							"\r",
							"        console.log(\"Завершение выполнения main()\");\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.environment.get(\"source\"));\r",
							"console.log(\"source=\", source);\r",
							"\r",
							"const target = pm.response.json();\r",
							"console.log(\"target=\", target);\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, text, userName, created, updated, replies\", function () {\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('text');\r",
							"    pm.expect(target).to.have.property('userName');\r",
							"    pm.expect(target).to.have.property('created');\r",
							"    pm.expect(target).to.have.property('updated');\r",
							"    pm.expect(target).to.have.property('reply');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(source.id).equal(target.id);\r",
							"    pm.expect(source.text).equal(target.text);\r",
							"    pm.expect(source.userName).equal(target.userName);\r",
							"    pm.expect(source.created).equal(target.created);\r",
							"    pm.expect(source.updated).equal(target.updated);\r",
							"    pm.expect(target).to.have.property('reply').that.is.null;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comment/:commentId?userId={{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comment",
						":commentId"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					],
					"variable": [
						{
							"key": "commentId",
							"value": "{{commentId}}"
						}
					]
				},
				"description": "Обратите внимание:\n - дата начала события должна быть не ранее чем за час от даты публикации.\n- событие должно быть в состоянии ожидания публикации"
			},
			"response": []
		},
		{
			"name": "Удаление комментария пользователем",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        console.log(\"Начало выполнения main()\");\r",
							"\r",
							"        const owner = await api.addUser(rnd.getUser());\r",
							"        console.log(\"Создан пользователь-владелец:\", owner);\r",
							"\r",
							"        const user1 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user1.id);\r",
							"        console.log(\"Создан пользователь:\", user1);\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        console.log(\"Создана категория:\", category);\r",
							"\r",
							"        let event = await api.addEvent(owner.id, rnd.getEvent(category.id));\r",
							"        console.log(\"Создано событие:\", event);\r",
							"\r",
							"        const updatedStatusEvent = await api.publishEvent(event.id);\r",
							"        console.log(\"Событие опубликовано:\", updatedStatusEvent);\r",
							"\r",
							"        pm.request.body.update({\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify(updatedStatusEvent),\r",
							"            options: { raw: { language: 'json' } }\r",
							"        });\r",
							"        \r",
							"        const comment = await api.addComment(event.id, user1.id, rnd.getComment(null));\r",
							"        console.log(\"Создан комментарий:\", comment);\r",
							"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
							"\r",
							"        console.log(\"Завершение выполнения main()\");\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(204);  \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/comment/:commentId?userId={{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comment",
						":commentId"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					],
					"variable": [
						{
							"key": "commentId",
							"value": "{{commentId}}"
						}
					]
				},
				"description": "Обратите внимание:\n - дата начала события должна быть не ранее чем за час от даты публикации.\n- событие должно быть в состоянии ожидания публикации"
			},
			"response": []
		},
		{
			"name": "Возврат всех своих комментариев пользователю",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        console.log(\"Начало выполнения main()\");\r",
							"\r",
							"        const owner = await api.addUser(rnd.getUser());\r",
							"        console.log(\"Создан пользователь-владелец:\", owner);\r",
							"\r",
							"        const user1 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user1.id);\r",
							"        console.log(\"Создан пользователь:\", user1);\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        console.log(\"Создана категория:\", category);\r",
							"\r",
							"        let event = await api.addEvent(owner.id, rnd.getEvent(category.id));\r",
							"        console.log(\"Создано событие:\", event);\r",
							"\r",
							"        let event1 = await api.addEvent(owner.id, rnd.getEvent(category.id));\r",
							"        console.log(\"Создано событие:\", event1);\r",
							"\r",
							"        const updatedStatusEvent = await api.publishEvent(event.id);\r",
							"        console.log(\"Событие опубликовано:\", updatedStatusEvent);\r",
							"\r",
							"        const updatedStatusEvent1 = await api.publishEvent(event1.id);\r",
							"        console.log(\"Событие опубликовано:\", updatedStatusEvent1);\r",
							"\r",
							"        pm.request.body.update({\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify(updatedStatusEvent),\r",
							"            options: { raw: { language: 'json' } }\r",
							"        });\r",
							"\r",
							"        pm.request.body.update({\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify(updatedStatusEvent1),\r",
							"            options: { raw: { language: 'json' } }\r",
							"        });\r",
							"        \r",
							"        const comment = await api.addComment(event.id, user1.id, rnd.getComment(null));\r",
							"        console.log(\"Создан комментарий:\", comment);\r",
							"\r",
							"        const comment1 = await api.addComment(event1.id, user1.id, rnd.getComment(null));\r",
							"        console.log(\"Создан комментарий:\", comment1);\r",
							"\r",
							"        pm.environment.set(\"source\", JSON.stringify(comment));\r",
							"        pm.environment.set(\"source1\", JSON.stringify(comment1));\r",
							"\r",
							"        console.log(\"Завершение выполнения main()\");\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"console.log(\"jsonData=\", jsonData);\r",
							"\r",
							"pm.test(\"Длина списка должна ровняться 2\", function () {\r",
							"    pm.expect(jsonData.length).to.eql(2);\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.environment.get(\"source\"));\r",
							"console.log(\"source=\", source);\r",
							"\r",
							"const source1 = JSON.parse(pm.environment.get(\"source1\"));\r",
							"console.log(\"source1=\", source1);\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, text, userName, created, updated, replies\", function () {\r",
							"    pm.expect(jsonData[0]).to.have.property('id');\r",
							"    pm.expect(jsonData[0]).to.have.property('text');\r",
							"    pm.expect(jsonData[0]).to.have.property('userName');\r",
							"    pm.expect(jsonData[0]).to.have.property('created');\r",
							"    pm.expect(jsonData[0]).to.have.property('updated');\r",
							"    pm.expect(jsonData[0]).to.have.property('reply');\r",
							"\r",
							"    pm.expect(jsonData[1]).to.have.property('id');\r",
							"    pm.expect(jsonData[1]).to.have.property('text');\r",
							"    pm.expect(jsonData[1]).to.have.property('userName');\r",
							"    pm.expect(jsonData[1]).to.have.property('created');\r",
							"    pm.expect(jsonData[1]).to.have.property('updated');\r",
							"    pm.expect(jsonData[1]).to.have.property('reply');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(jsonData[0].id).to.eql(source.id);\r",
							"    pm.expect(jsonData[0].text).to.eql(source.text);\r",
							"    pm.expect(jsonData[0].userName).to.eql(source.userName);\r",
							"    pm.expect(jsonData[0].created).to.eql(source.created);\r",
							"    pm.expect(jsonData[0].updated).to.eql(source.updated);\r",
							"    pm.expect(jsonData[0].reply).to.eql(source.reply);\r",
							"\r",
							"    pm.expect(jsonData[1].id).to.eql(source1.id);\r",
							"    pm.expect(jsonData[1].text).to.eql(source1.text);\r",
							"    pm.expect(jsonData[1].userName).to.eql(source1.userName);\r",
							"    pm.expect(jsonData[1].created).to.eql(source1.created);\r",
							"    pm.expect(jsonData[1].updated).to.eql(source1.updated);\r",
							"    pm.expect(jsonData[1].reply).to.eql(source1.reply);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comment/user/:userId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comment",
						"user",
						":userId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				},
				"description": "Обратите внимание:\n - дата начала события должна быть не ранее чем за час от даты публикации.\n- событие должно быть в состоянии ожидания публикации"
			},
			"response": []
		},
		{
			"name": "Возврат одного своего комментария пользователю",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        console.log(\"Начало выполнения main()\");\r",
							"\r",
							"        const owner = await api.addUser(rnd.getUser());\r",
							"        console.log(\"Создан пользователь-владелец:\", owner);\r",
							"\r",
							"        const user1 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user1.id);\r",
							"        console.log(\"Создан пользователь:\", user1);\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        console.log(\"Создана категория:\", category);\r",
							"\r",
							"        let event = await api.addEvent(owner.id, rnd.getEvent(category.id));\r",
							"        console.log(\"Создано событие:\", event);\r",
							"\r",
							"        let event1 = await api.addEvent(owner.id, rnd.getEvent(category.id));\r",
							"        console.log(\"Создано событие:\", event1);\r",
							"\r",
							"        const updatedStatusEvent = await api.publishEvent(event.id);\r",
							"        console.log(\"Событие опубликовано:\", updatedStatusEvent);\r",
							"\r",
							"        const updatedStatusEvent1 = await api.publishEvent(event1.id);\r",
							"        console.log(\"Событие опубликовано:\", updatedStatusEvent1);\r",
							"\r",
							"        pm.request.body.update({\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify(updatedStatusEvent),\r",
							"            options: { raw: { language: 'json' } }\r",
							"        });\r",
							"\r",
							"        pm.request.body.update({\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify(updatedStatusEvent1),\r",
							"            options: { raw: { language: 'json' } }\r",
							"        });\r",
							"        \r",
							"        const comment1 = await api.addComment(event.id, user1.id, rnd.getComment(null));\r",
							"        console.log(\"Создан комментарий:\", comment1);\r",
							"\r",
							"        const comment = await api.addComment(event1.id, user1.id, rnd.getComment(null));\r",
							"        console.log(\"Создан комментарий:\", comment);\r",
							"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
							"        pm.environment.set(\"source\", JSON.stringify(comment));\r",
							"\r",
							"        console.log(\"Завершение выполнения main()\");\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.environment.get(\"source\"));\r",
							"console.log(\"source=\", source);\r",
							"\r",
							"const target = pm.response.json();\r",
							"console.log(\"target=\", target);\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, text, userName, created, updated, replies\", function () {\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('text');\r",
							"    pm.expect(target).to.have.property('userName');\r",
							"    pm.expect(target).to.have.property('created');\r",
							"    pm.expect(target).to.have.property('updated');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target).to.have.property('id').that.is.not.null;\r",
							"    pm.expect(source.text).equal(target.text);\r",
							"    pm.expect(source.userName).equal(target.userName);\r",
							"    pm.expect(source.created).equal(target.created);\r",
							"    pm.expect(source.updated).equal(target.updated);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comment/:commentId?userId={{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comment",
						":commentId"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					],
					"variable": [
						{
							"key": "commentId",
							"value": "{{commentId}}"
						}
					]
				},
				"description": "Обратите внимание:\n - дата начала события должна быть не ранее чем за час от даты публикации.\n- событие должно быть в состоянии ожидания публикации"
			},
			"response": []
		},
		{
			"name": "Возврат всех комментариев пользователя администратору",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        console.log(\"Начало выполнения main()\");\r",
							"\r",
							"        const owner = await api.addUser(rnd.getUser());\r",
							"        console.log(\"Создан пользователь-владелец:\", owner);\r",
							"\r",
							"        const user1 = await api.addUser(rnd.getUser());\r",
							"        console.log(\"Создан пользователь:\", user1);\r",
							"        pm.collectionVariables.set(\"userId\", user1.id);\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        console.log(\"Создана категория:\", category);\r",
							"\r",
							"        let event = await api.addEvent(owner.id, rnd.getEvent(category.id));\r",
							"        console.log(\"Создано событие:\", event);\r",
							"\r",
							"        let event2 = await api.addEvent(owner.id, rnd.getEvent(category.id));\r",
							"        console.log(\"Создано событие:\", event2);\r",
							"\r",
							"        let event1 = await api.addEvent(owner.id, rnd.getEvent(category.id));\r",
							"        console.log(\"Создано событие:\", event1);\r",
							"\r",
							"        const updatedStatusEvent = await api.publishEvent(event.id);\r",
							"        console.log(\"Событие опубликовано:\", updatedStatusEvent);\r",
							"\r",
							"        const updatedStatusEvent1 = await api.publishEvent(event1.id);\r",
							"        console.log(\"Событие опубликовано:\", updatedStatusEvent1);\r",
							"\r",
							"        pm.request.body.update({\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify(updatedStatusEvent),\r",
							"            options: { raw: { language: 'json' } }\r",
							"        });\r",
							"\r",
							"        pm.request.body.update({\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify(updatedStatusEvent1),\r",
							"            options: { raw: { language: 'json' } }\r",
							"        });\r",
							"        \r",
							"        const comment = await api.addComment(event.id, user1.id, rnd.getComment(null));\r",
							"        console.log(\"Создан комментарий:\", comment);\r",
							"        pm.environment.set(\"source\", JSON.stringify(comment));\r",
							"\r",
							"        const comment1 = await api.addComment(event1.id, user1.id, rnd.getComment(null));\r",
							"        console.log(\"Создан комментарий:\", comment1);\r",
							"        pm.environment.set(\"source1\", JSON.stringify(comment1));\r",
							"\r",
							"        console.log(\"Завершение выполнения main()\");\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"console.log(\"jsonData=\", jsonData);\r",
							"\r",
							"pm.test(\"Длина списка должна ровняться 2\", function () {\r",
							"    pm.expect(jsonData.length).to.eql(2);\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.environment.get(\"source\"));\r",
							"console.log(\"source=\", source);\r",
							"\r",
							"const source1 = JSON.parse(pm.environment.get(\"source1\"));\r",
							"console.log(\"source1=\", source1);\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, text, author, event, created, updated, parentComment\", function () {\r",
							"    pm.expect(jsonData[0]).to.have.property('id');\r",
							"    pm.expect(jsonData[0]).to.have.property('text');\r",
							"    pm.expect(jsonData[0]).to.have.property('author');\r",
							"    pm.expect(jsonData[0]).to.have.property('event');\r",
							"    pm.expect(jsonData[0]).to.have.property('created');\r",
							"    pm.expect(jsonData[0]).to.have.property('updated');\r",
							"    pm.expect(jsonData[0]).to.have.property('parentComment');\r",
							"\r",
							"    pm.expect(jsonData[1]).to.have.property('id');\r",
							"    pm.expect(jsonData[1]).to.have.property('text');\r",
							"    pm.expect(jsonData[1]).to.have.property('author');\r",
							"    pm.expect(jsonData[1]).to.have.property('event');\r",
							"    pm.expect(jsonData[1]).to.have.property('created');\r",
							"    pm.expect(jsonData[1]).to.have.property('updated');\r",
							"    pm.expect(jsonData[1]).to.have.property('parentComment');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(jsonData[0].id).to.eql(source.id);\r",
							"    pm.expect(jsonData[0].text).to.eql(source.text);\r",
							"    pm.expect(jsonData[0].created).to.eql(source.created);\r",
							"    pm.expect(jsonData[0].updated).to.eql(source.updated);\r",
							"\r",
							"    pm.expect(jsonData[1].id).to.eql(source1.id);\r",
							"    pm.expect(jsonData[1].text).to.eql(source1.text);\r",
							"    pm.expect(jsonData[1].created).to.eql(source1.created);\r",
							"    pm.expect(jsonData[1].updated).to.eql(source1.updated);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comment/user/:userId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comment",
						"user",
						":userId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				},
				"description": "Обратите внимание:\n - дата начала события должна быть не ранее чем за час от даты публикации.\n- событие должно быть в состоянии ожидания публикации"
			},
			"response": []
		},
		{
			"name": "Возврат одного комментария пользователя администратору",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        console.log(\"Начало выполнения main()\");\r",
							"\r",
							"        const owner = await api.addUser(rnd.getUser());\r",
							"        console.log(\"Создан пользователь-владелец:\", owner);\r",
							"\r",
							"        const user1 = await api.addUser(rnd.getUser());\r",
							"        console.log(\"Создан пользователь:\", user1);\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        console.log(\"Создана категория:\", category);\r",
							"\r",
							"        let event = await api.addEvent(owner.id, rnd.getEvent(category.id));\r",
							"        console.log(\"Создано событие:\", event);\r",
							"\r",
							"        let event1 = await api.addEvent(owner.id, rnd.getEvent(category.id));\r",
							"        console.log(\"Создано событие:\", event1);\r",
							"\r",
							"        const updatedStatusEvent = await api.publishEvent(event.id);\r",
							"        console.log(\"Событие опубликовано:\", updatedStatusEvent);\r",
							"\r",
							"        const updatedStatusEvent1 = await api.publishEvent(event1.id);\r",
							"        console.log(\"Событие опубликовано:\", updatedStatusEvent1);\r",
							"\r",
							"        pm.request.body.update({\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify(updatedStatusEvent),\r",
							"            options: { raw: { language: 'json' } }\r",
							"        });\r",
							"\r",
							"        pm.request.body.update({\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify(updatedStatusEvent1),\r",
							"            options: { raw: { language: 'json' } }\r",
							"        });\r",
							"        \r",
							"        const comment1 = await api.addComment(event.id, user1.id, rnd.getComment(null));\r",
							"        console.log(\"Создан комментарий:\", comment1);\r",
							"\r",
							"        const comment = await api.addComment(event1.id, user1.id, rnd.getComment(null));\r",
							"        console.log(\"Создан комментарий:\", comment);\r",
							"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
							"        pm.environment.set(\"source\", JSON.stringify(comment));\r",
							"\r",
							"        console.log(\"Завершение выполнения main()\");\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.environment.get(\"source\"));\r",
							"console.log(\"source=\", source);\r",
							"\r",
							"const target = pm.response.json();\r",
							"console.log(\"target=\", target);\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, text, author, event, created, updated, parentComment\", function () {\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('text');\r",
							"    pm.expect(target).to.have.property('author');\r",
							"    pm.expect(target).to.have.property('event');\r",
							"    pm.expect(target).to.have.property('created');\r",
							"    pm.expect(target).to.have.property('updated');\r",
							"    pm.expect(target).to.have.property('parentComment');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(source.id).equal(target.id);\r",
							"    pm.expect(source.text).equal(target.text);\r",
							"    pm.expect(source.created).equal(target.created);\r",
							"    pm.expect(source.updated).equal(target.updated);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comment/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comment",
						":commentId"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "{{commentId}}"
						}
					]
				},
				"description": "Обратите внимание:\n - дата начала события должна быть не ранее чем за час от даты публикации.\n- событие должно быть в состоянии ожидания публикации"
			},
			"response": []
		},
		{
			"name": "Удаление комментария пользователя администратором",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        console.log(\"Начало выполнения main()\");\r",
							"\r",
							"        const owner = await api.addUser(rnd.getUser());\r",
							"        console.log(\"Создан пользователь-владелец:\", owner);\r",
							"\r",
							"        const user1 = await api.addUser(rnd.getUser());\r",
							"        console.log(\"Создан пользователь:\", user1);\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        console.log(\"Создана категория:\", category);\r",
							"\r",
							"        let event = await api.addEvent(owner.id, rnd.getEvent(category.id));\r",
							"        console.log(\"Создано событие:\", event);\r",
							"\r",
							"        const updatedStatusEvent = await api.publishEvent(event.id);\r",
							"        console.log(\"Событие опубликовано:\", updatedStatusEvent);\r",
							"\r",
							"        pm.request.body.update({\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify(updatedStatusEvent),\r",
							"            options: { raw: { language: 'json' } }\r",
							"        });\r",
							"        \r",
							"        const comment = await api.addComment(event.id, user1.id, rnd.getComment(null));\r",
							"        console.log(\"Создан комментарий:\", comment);\r",
							"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
							"\r",
							"        console.log(\"Завершение выполнения main()\");\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(204);  \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comment/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comment",
						":commentId"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "{{commentId}}"
						}
					]
				},
				"description": "Обратите внимание:\n - дата начала события должна быть не ранее чем за час от даты публикации.\n- событие должно быть в состоянии ожидания публикации"
			},
			"response": []
		},
		{
			"name": "Возврат всех комментариев по тексту администратору",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        console.log(\"Начало выполнения main()\");\r",
							"\r",
							"        const owner = await api.addUser(rnd.getUser());\r",
							"        console.log(\"Создан пользователь-владелец:\", owner);\r",
							"\r",
							"        const user1 = await api.addUser(rnd.getUser());\r",
							"        console.log(\"Создан пользователь:\", user1);\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        console.log(\"Создана категория:\", category);\r",
							"\r",
							"        let event = await api.addEvent(owner.id, rnd.getEvent(category.id));\r",
							"        console.log(\"Создано событие:\", event);\r",
							"\r",
							"        let event2 = await api.addEvent(owner.id, rnd.getEvent(category.id));\r",
							"        console.log(\"Создано событие:\", event2);\r",
							"\r",
							"        let event1 = await api.addEvent(owner.id, rnd.getEvent(category.id));\r",
							"        console.log(\"Создано событие:\", event1);\r",
							"\r",
							"        const updatedStatusEvent = await api.publishEvent(event.id);\r",
							"        console.log(\"Событие опубликовано:\", updatedStatusEvent);\r",
							"\r",
							"        const updatedStatusEvent1 = await api.publishEvent(event1.id);\r",
							"        console.log(\"Событие опубликовано:\", updatedStatusEvent1);\r",
							"\r",
							"        pm.request.body.update({\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify(updatedStatusEvent),\r",
							"            options: { raw: { language: 'json' } }\r",
							"        });\r",
							"\r",
							"        pm.request.body.update({\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify(updatedStatusEvent1),\r",
							"            options: { raw: { language: 'json' } }\r",
							"        });\r",
							"        \r",
							"        const comment = await api.addComment(event.id, user1.id, rnd.getComment(null));\r",
							"        console.log(\"Создан комментарий:\", comment);\r",
							"        pm.environment.set(\"source\", JSON.stringify(comment));\r",
							"\r",
							"        const comment1 = await api.addComment(event1.id, user1.id, rnd.getComment(null));\r",
							"        console.log(\"Создан комментарий:\", comment1);\r",
							"        pm.environment.set(\"source1\", JSON.stringify(comment1));\r",
							"\r",
							"        console.log(\"Завершение выполнения main()\");\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"console.log(\"jsonData=\", jsonData);\r",
							"\r",
							"pm.test(\"Длина списка должна быть больше 0\", function () {\r",
							"    pm.expect(jsonData.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.environment.get(\"source\"));\r",
							"console.log(\"source=\", source);\r",
							"\r",
							"const source1 = JSON.parse(pm.environment.get(\"source1\"));\r",
							"console.log(\"source1=\", source1);\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, text, author, event, created, updated, parentComment\", function () {\r",
							"    pm.expect(jsonData[0]).to.have.property('id');\r",
							"    pm.expect(jsonData[0]).to.have.property('text');\r",
							"    pm.expect(jsonData[0]).to.have.property('author');\r",
							"    pm.expect(jsonData[0]).to.have.property('event');\r",
							"    pm.expect(jsonData[0]).to.have.property('created');\r",
							"    pm.expect(jsonData[0]).to.have.property('updated');\r",
							"    pm.expect(jsonData[0]).to.have.property('parentComment');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comment?text=a",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comment"
					],
					"query": [
						{
							"key": "text",
							"value": "a"
						}
					]
				},
				"description": "Обратите внимание:\n - дата начала события должна быть не ранее чем за час от даты публикации.\n- событие должно быть в состоянии ожидания публикации"
			},
			"response": []
		},
		{
			"name": "Возврат всех комментариев события и ответов на них первого уровня",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        console.log(\"Начало выполнения main()\");\r",
							"\r",
							"        const owner = await api.addUser(rnd.getUser());\r",
							"        console.log(\"Создан пользователь-владелец:\", owner);\r",
							"\r",
							"        const user1 = await api.addUser(rnd.getUser());\r",
							"        console.log(\"Создан пользователь:\", user1);\r",
							"\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        console.log(\"Создан пользователь:\", user2);\r",
							"\r",
							"        const user3 = await api.addUser(rnd.getUser());\r",
							"        console.log(\"Создан пользователь:\", user3);\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        console.log(\"Создана категория:\", category);\r",
							"\r",
							"        let event = await api.addEvent(owner.id, rnd.getEvent(category.id));\r",
							"        console.log(\"Создано событие:\", event);\r",
							"        pm.collectionVariables.set(\"eventId\", event.id);\r",
							"\r",
							"        const updatedStatusEvent = await api.publishEvent(event.id);\r",
							"        console.log(\"Событие опубликовано:\", updatedStatusEvent);\r",
							"\r",
							"        pm.request.body.update({\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify(updatedStatusEvent),\r",
							"            options: { raw: { language: 'json' } }\r",
							"        });\r",
							"\r",
							"        const comment = await api.addComment(event.id, user1.id, rnd.getComment(null));\r",
							"        console.log(\"Создан комментарий:\", comment);\r",
							"        pm.environment.set(\"source\", JSON.stringify(comment));\r",
							"\r",
							"        const comment1 = await api.addComment(event.id, user2.id, rnd.getComment(null));\r",
							"        console.log(\"Создан комментарий:\", comment1);\r",
							"        pm.environment.set(\"source1\", JSON.stringify(comment1));\r",
							"\r",
							"        const comment2 = await api.addComment(event.id, owner.id, rnd.getComment(comment.id));\r",
							"        console.log(\"Создан комментарий:\", comment2);\r",
							"        pm.environment.set(\"source2\", JSON.stringify(comment2));\r",
							"\r",
							"        console.log(\"Завершение выполнения main()\");\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"console.log(\"jsonData=\", jsonData);\r",
							"\r",
							"pm.test(\"Длина списка должна ровняться 2\", function () {\r",
							"    pm.expect(jsonData.length).to.eql(2);\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.environment.get(\"source\"));\r",
							"console.log(\"source=\", source);\r",
							"\r",
							"const source1 = JSON.parse(pm.environment.get(\"source1\"));\r",
							"console.log(\"source1=\", source1);\r",
							"\r",
							"const source2 = JSON.parse(pm.environment.get(\"source2\"));\r",
							"console.log(\"source2=\", source2);\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, text, userName, created, updated, replies\", function () {\r",
							"    pm.expect(jsonData[0]).to.have.property('id');\r",
							"    pm.expect(jsonData[0]).to.have.property('text');\r",
							"    pm.expect(jsonData[0]).to.have.property('userName');\r",
							"    pm.expect(jsonData[0]).to.have.property('created');\r",
							"    pm.expect(jsonData[0]).to.have.property('updated');\r",
							"    pm.expect(jsonData[0]).to.have.property('reply');\r",
							"\r",
							"    pm.expect(jsonData[1]).to.have.property('id');\r",
							"    pm.expect(jsonData[1]).to.have.property('text');\r",
							"    pm.expect(jsonData[1]).to.have.property('userName');\r",
							"    pm.expect(jsonData[1]).to.have.property('created');\r",
							"    pm.expect(jsonData[1]).to.have.property('updated');\r",
							"    pm.expect(jsonData[1]).to.have.property('reply');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(jsonData[0].id).to.eql(source.id);\r",
							"    pm.expect(jsonData[0].text).to.eql(source.text);\r",
							"    pm.expect(jsonData[0].userName).to.eql(source.userName);\r",
							"    pm.expect(jsonData[0].created).to.eql(source.created);\r",
							"    pm.expect(jsonData[0].updated).to.eql(source.updated);\r",
							"    pm.expect(jsonData[0].reply).to.eql(source2);\r",
							"\r",
							"    pm.expect(jsonData[1].id).to.eql(source1.id);\r",
							"    pm.expect(jsonData[1].text).to.eql(source1.text);\r",
							"    pm.expect(jsonData[1].userName).to.eql(source1.userName);\r",
							"    pm.expect(jsonData[1].created).to.eql(source1.created);\r",
							"    pm.expect(jsonData[1].updated).to.eql(source1.updated);\r",
							"    pm.expect(jsonData[1]).to.have.property('reply').that.is.null;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comment/event/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comment",
						"event",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{eventId}}"
						}
					]
				},
				"description": "Обратите внимание:\n - дата начала события должна быть не ранее чем за час от даты публикации.\n- событие должно быть в состоянии ожидания публикации"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"API = class {\r",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {\r",
					"        this.baseUrl = baseUrl;\r",
					"        this.pm = postman;\r",
					"        this._verbose = verbose;\r",
					"    }\r",
					"\r",
					"    async addUser(user, verbose=null) {\r",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addCategory(category, verbose=null) {\r",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addEvent(userId, event, verbose=null) {\r",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);\r",
					"    } \r",
					"\r",
					"    async addComment(eventId, userId, comment, verbose=null) {\r",
					"        return this.post(\"/comment/event/\" + eventId + \"?userId=\" + userId, comment, \"Ошибка при добавлении нового комментария пользователем: \", verbose);\r",
					"    }\r",
					"\r",
					"    async updateComment(commentId, userId, comment, verbose=null) {\r",
					"        return this.patch(\"/comment/\" + commentId + \"?userId=\" + userId, comment, \"Ошибка при обновлении комментария пользователем: \", verbose);\r",
					"    }\r",
					"\r",
					"    async deleteComment(commentId, userId, verbose=null) {\r",
					"        return this.delete(\"/comment/\" + commentId + \"?userId=\" + userId, null, \"Ошибка при удалении комментария пользователем: \", verbose);\r",
					"    }\r",
					"\r",
					"    async getComment(commentId, userId, verbose=null) {\r",
					"        return this.get(\"/comment/\" + commentId + \"?userId=\" + userId, null, \"Ошибка при получении комментария пользователя: \", verbose);\r",
					"    }\r",
					"\r",
					"    async getAllCommentsUser(userId, verbose=null) {\r",
					"        return this.get(\"/comment/user/\" + userId, null, \"Ошибка при получении комментариев пользователя: \", verbose);\r",
					"    }\r",
					"\r",
					"    async getAllCommentsByEvent(eventId, verbose=null) {\r",
					"        return this.get(\"/comment/event/\" + eventId, null, \"Ошибка при получении комментариев события: \", verbose);\r",
					"    }\r",
					"\r",
					"    async getAllCommentsByEvents(verbose=null) {\r",
					"        return this.get(\"/comment/event/\", null, \"Ошибка при получении комментариев событий: \", verbose);\r",
					"    }\r",
					"\r",
					"    async deleteCommentByAdmin(commentId, verbose=null) {\r",
					"        return this.delete(\"/admin/comment/\" + commentId, null, \"Ошибка при удалении комментария администратором: \", verbose);\r",
					"    }\r",
					"\r",
					"    async getAllCommentsUserForAdmin(userId, verbose=null) {\r",
					"        return this.get(\"/admin/comment/user/\" + userId, null, \"Ошибка при получении комментариев пользователя администратором: \", verbose);\r",
					"    }\r",
					"\r",
					"    async getCommentForAdmin(commentId, verbose=null) {\r",
					"        return this.get(\"/admin/comment/\" + commentId, null, \"Ошибка при получении комментария пользователя администратором: \", verbose);\r",
					"    }\r",
					"\r",
					"    async getAllCommentsByTextForAdmin(text, verbose=null) {\r",
					"        return this.get(\"/admin/comment?text=\" + text, null, \"Ошибка при получении комментариев по тексту администратором: \", verbose);\r",
					"    }\r",
					"\r",
					"    async publishEvent(eventId, verbose=null) {\r",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);\r",
					"    }\r",
					"    \r",
					"    async rejectEvent(eventId, verbose=null) {\r",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);\r",
					"    }\r",
					"\r",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async patch(path, body, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async get(path, body, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async delete(path, body, errorText = \"Ошибка при выполнении delete-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"DELETE\", path, body, errorText, verbose);\r",
					"    }\r",
					"    \r",
					"    async sendRequest(method, path, body, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {\r",
					"        return new Promise((resolve, reject) => {\r",
					"            verbose = verbose == null ? this._verbose : verbose;\r",
					"            const request = {\r",
					"                url: this.baseUrl + path,\r",
					"                method: method,\r",
					"                body: body == null ? \"\" : JSON.stringify(body),\r",
					"                header: { \"Content-Type\": \"application/json\" },\r",
					"            };\r",
					"\r",
					"            if(verbose) {\r",
					"                console.log(\"Отправляю запрос: \", request);\r",
					"            }\r",
					"\r",
					"            try {\r",
					"                this.pm.sendRequest(request, (error, response) => {\r",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {\r",
					"                        let err = error ? error : JSON.stringify(response.json());\r",
					"                        console.error(\"При выполнении запроса к серверу возникла ошибка.\\n\", err,\r",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + \r",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));\r",
					"\r",
					"                        reject(new Error(errorText + err));\r",
					"                    }\r",
					"\r",
					"                    if(verbose) {\r",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());\r",
					"                    }\r",
					"\r",
					"                    if(request.method === 'DELETE') {\r",
					"                        resolve();\r",
					"                    }\r",
					"\r",
					"                    return resolve(response.json());\r",
					"                });\r",
					"                \r",
					"            } catch(err) {\r",
					"                if(verbose) {\r",
					"                    console.error(errorText, err);\r",
					"                }\r",
					"                return Promise.reject(err);\r",
					"            }\r",
					"        });\r",
					"    }\r",
					"};\r",
					"\r",
					"RandomUtils = class {\r",
					"    constructor() {}\r",
					"\r",
					"    getUser() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),\r",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getCategory() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getEvent(categoryId) {\r",
					"        return {\r",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),\r",
					"            category: categoryId,\r",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),\r",
					"            eventDate: this.getFutureDateTime(),\r",
					"            location: {\r",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),\r",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),\r",
					"            },\r",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),\r",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
					"        }\r",
					"    }\r",
					"\r",
					"    getComment(commentId) {\r",
					"        return {\r",
					"            text: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(1, 100),\r",
					"            parentComment: commentId\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getCommentUpdate(commentId, commentParentId) {\r",
					"        return {\r",
					"            id: commentId,\r",
					"            text: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(1, 100),\r",
					"            parentComment: commentParentId\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {\r",
					"        let moment = require('moment');\r",
					"\r",
					"        let m = moment();\r",
					"        m.add(hourShift, 'hour');\r",
					"        m.add(minuteShift, 'minute');\r",
					"        m.add(yearShift, 'year');\r",
					"\r",
					"        return m.format('YYYY-MM-DD HH:mm:ss');\r",
					"    }\r",
					"\r",
					"    getWord(length = 1) {\r",
					"        let result = '';\r",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
					"        const charactersLength = characters.length;\r",
					"        let counter = 0;\r",
					"        while (counter < length) {\r",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
					"            counter += 1;\r",
					"        }\r",
					"        return result;\r",
					"    }\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		},
		{
			"key": "request_body",
			"value": "",
			"type": "string"
		},
		{
			"key": "source",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "eventId",
			"value": "",
			"type": "string"
		},
		{
			"key": "commentId",
			"value": ""
		},
		{
			"key": "response",
			"value": "",
			"type": "string"
		},
		{
			"key": "response1",
			"value": ""
		},
		{
			"key": "response2",
			"value": ""
		},
		{
			"key": "response3",
			"value": ""
		}
	]
}